主题：日报
日期：2019年8月2日	星期五
内容：
1.今天学习的内容：老师讲解了SpringMVC。
	
		
2.没有解决的问题：
	老师今天留的任务还未完成。
3.明天的学习计划：
	学姐分享项目中的秒杀模块
	
算法：
1.生成窗口最大值数组：
/**
 * 生成窗口最大数组：
 *  对于{4,5,3,4,3,6,3,7,1}这样一个数组，假设规定窗口大小为3
 *  [4,5,3],4,3,6,3,7,1 ---对应窗口内的最大值为5
 *  4,[5,3,4],3,6,3,7,1 ---对应窗口内的最大值为5
 *      ...
 */

public class MaxWindow {

    public static int [] maxWindow(int [] arr ,int w){
        if (arr==null||w<1||arr.length<w){
            throw new RuntimeException("array length error ");
        }
        int [] re=new int [arr.length-w+1];
        int index=0;

        LinkedList<Integer> queue=new LinkedList<>();
        for (int i=0;i<arr.length;i++){
            //保证队头放的是最大元素的下标
            while (!queue.isEmpty()&&arr[queue.peekLast()]<=arr[i]){
                queue.pollLast();
            }
            queue.addLast(i);
            //  起始，末尾下标超过窗口大小w，则移除队头
            if (i-queue.peekFirst()==w){
                queue.pollFirst();
            }
            //  从第w个开始，每次都要找出当前窗口中的最大值
            if (i+1>=w){
                re[index++]=arr[queue.peekFirst()];
            }
        }

        return re;
    }

    public static void main(String[] args) {
        int [] arr={4,5,3,4,3,6,3,7,1};
        int w=3;
        int [] re=maxWindow(arr,w);

        for (int elem: re){
            System.out.print(elem+"  ");
        }
    }
}


2.复习快速排序：
public class ebug {

    public static void quickSort(int [] data){
        sortCore(data,0,data.length-1);
    }

    private static void sortCore(int [] a,int low,int high){
        if (low<high){
            int mid=partition(a,low,high);
            if (mid-1>low){
                sortCore(a,low,mid-1);
            }
            if (mid+1<high){
                sortCore(a,mid+1,high);
            }
        }
    }
    private static int partition(int []a,int low,int high){
        int small=low+1;
        int base=a[low];
        for (int i=low+1;i<=high;i++){
            if (a[i]<base){
                if (i!=small){
                    swap(a,small,i);
                }
                small++;
            }
        }
        swap(a,low,small-1);
        return small-1;
    }
    private static void swap(int [] a,int i,int j){
        int t=a[i];
        a[i]=a[j];
        a[j]=t;
    }

    public static void main(String[] args){
        int [] data={3,2,5,8,4,7,6,9,1};
        System.out.println(Arrays.toString(data));
        quickSort(data);
        System.out.println(Arrays.toString(data));
    }
}
