package aliyun;

import java.util.Stack;
/**
 * 给定一个以字符串表示的非负整数?num，移除这个数中的 k 位数字，使得剩下的数字最小。

注意:

num 的长度小于 10002 且?≥ k。
num 不会包含任何前导零。
示例 1 :

输入: num = "1432219", k = 3
输出: "1219"
解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。
示例 2 :

输入: num = "10200", k = 1
输出: "200"
解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
示例 3 :

输入: num = "10", k = 2
输出: "0"
解释: 从原数字移除所有的数字，剩余为空就是0。

 * @author quanhangbo
 *
 */
public class tanxin04 {
	public static String removeKdigits(String num,int k) {
		Stack<Integer>stack=new Stack<Integer>();
		StringBuilder str=new StringBuilder();
		char[] nums=num.toCharArray();
		for(int i=0;i<nums.length;i++) {
			int number=nums[i]-'0';
			while(!stack.isEmpty()&&stack.peek()>number&&k>0) {
				stack.pop();
				k--;
			}
			if(number!=0||stack.size()>0) {
				stack.push(number);
			}
		}
		while(stack.size()!=0&&k>0) {
			stack.pop();
			k--;
		}
		for(int i=0;i<stack.size();i++) {
			str.append(stack.get(i));
		}
		if(str.toString().equals(""))return "0";
		return str.toString();
	}
	public static void main(String[] args) {
		String str=removeKdigits("100",1);
		System.out.println(str);
	}
}
